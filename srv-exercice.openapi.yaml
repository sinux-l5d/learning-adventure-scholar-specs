openapi: 3.0.1

info:
  title: LAWeb | Service d'exercice
  description: Permet de gérer des exercices et d'obtenir le suivant.
  version: 0.2.0
  license:
    name: MIT License

servers:
  - url: http://127.0.0.1:3000
    description: Serveur local

paths:

  /exercices:
    get:
      summary: Listes des exercices existants
      tags:
        - Exercices
      parameters:
        - $ref: '#/components/parameters/FilterTheme'
        - $ref: '#/components/parameters/FilterDifficulte'
      responses:
        '200':
          description: Liste des exercices
          content:
            application/json:
              schema:
                type: object
                properties:
                  exercices:
                    type: array
                    items:
                      $ref: '#/components/schemas/ExerciceModeleComplet'
        '404':
          description: Il n'y a pas d'exercice dans la base de données
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'
              example: { error: Exercices not found }
    post:
      summary: Ajouter un exercice
      tags:
        - Exercices
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ExerciceModeleCompletSansId'
      responses:
        '200':
          description: Réussi

  /exercices/one:
    get:
      summary: Renvoie un exercice aléatoire.
      description: |
        Renvoie un exercice aléatoire de la base de donnée.
        
        On peut appliquer des filtres optionnels.
        Si le filtre n'existe pas, il est ignoré.
      tags:
        - Exercices
      parameters:
        - $ref: '#/components/parameters/FilterTheme'
        - $ref: '#/components/parameters/FilterDifficulte'
      responses:
        '200':
          description: Liste des exercices
          content:
            application/json:
              schema:
                type: object
                properties:
                  exercice:
                    $ref: '#/components/schemas/ExerciceModeleComplet'
        '404':
          description: Pas d'exercice correspondant aux critères
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'
              examples:
                FiltreValideValeurInvalide:
                  value: { error: Exercices not found }

  /exercices/{id}:
    get:
      summary: Un exercice particulier
      tags:
        - Exercices
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: ObjectId
      responses:
        '200':
          description: |
            L'exercice avec l'id demandé.
          content:
            application/json:
              schema:
                type: object
                properties:
                  exercice:
                    # Façon de mettre un object optionnel avec OpenAPI 3.0.1
                    nullable: true
                    allOf:
                      - $ref: '#/components/schemas/ExerciceModeleComplet'
        '404':
          description: |
            Si l'id n'est pas présent dans la bdd.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'
              example: { error: Exercice not found }
              
  
  /exercices/{id}/next:
    get:
      summary: Prochain exercice
      description: Appele le service stratégie pour obtenir le prochain exercice
      deprecated: true
      tags:
        - Exercices
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: ObjectId
      responses:
        '200':
          description: |
            Prochain exercice

            Il sera vide si l'étudiant a fini tous les exercices.
          content:
            application/json:
              schema:
                type: object
                properties:
                  exercice:
                    # Façon d'avoir un objet optionnel avec la version 3.0.1 d'OpenAPI
                    # Plus prope en version supérieur avec oneOf null/object
                    nullable: true
                    allOf: 
                      - $ref: '#/components/schemas/ExerciceModeleComplet'
        '404':
          description: |
            Erreur de connexion avec le service stratégie
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'
              example: { error: "Not found: Error: connect ECONNREFUSED" }

  /sessions:
    post:
      summary: Créer une session
      description: | 
        Créer une nouvelle session, composée d'exercices et de séances.

        `exercices` doit être un tableau d'`ObjectId` correspondant à des exercices.
      tags:
        - Sessions
      parameters:
        - $ref: '#/components/parameters/PopulateSession'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionModeleReq'
      responses:
        '200':
          description: Réussi
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionModeleComplet'

    get:
      summary: Liste des sessions
      tags:
        - Sessions
      parameters:
        - $ref: '#/components/parameters/PopulateSession'
      responses:
        '200':
          description: Liste des sessions
          content:
            application/json:
              schema:
                type: object
                properties:
                  sessions:
                    type: array
                    items:
                      $ref: '#/components/schemas/SessionModeleComplet'

  /sessions/{id}:
    get:
      summary: Une session particulière
      tags:
        - Sessions
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: ObjectId
        - $ref: '#/components/parameters/PopulateSession'
      responses:
        '200':
          description: Session demandée
          content:
            application/json:
              schema:
                type: object
                properties:
                  session:
                    $ref: '#/components/schemas/SessionModeleComplet'
        '404':
          description: |
            Si l'id n'est pas présent dans la bdd.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'

  /sessions/{id}/exercices:
    get:
      summary: Liste des exercices d'une session
      tags:
        - Sessions
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: ObjectId
        - $ref: '#/components/parameters/PopulateSession'
      responses:
        '200':
          description: Liste des exercices de la session
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExerciceModeleComplet'
        '404':
          description: |
            Si l'id n'est pas présent dans la bdd.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'

  /sessions/{idSession}/exercices/{idExercice}/next:
    get:
      summary: Prochain exercice
      description: Appele le service stratégie pour obtenir le prochain exercice
      tags:
        - Sessions
      parameters:
        - in: path
          name: idSession
          required: true
          schema:
            type: string
            format: ObjectId
        - in: path
          name: idExercice
          required: true
          schema:
            type: string
            format: ObjectId
          description: Un ObjectId ou "init" pour le premier exercice de la session.
        - in: header
          name: X-Etudiant-ID
          schema:
            type: string
            pattern: '^[a-zA-Z\-]+\.[a-zA-Z\-]+$'
        - in: header
          name: X-Seance-ID
          schema:
            type: string
            format: ObjectId

      responses:
        '200':
          description: | 
            Renvoie le prochain exercice, ou un objet vide si c'était le dernier exercice de la session.
          content:
            application/json:
              schema:
                # objet optionnel
                nullable: true
                allOf:
                - $ref: '#/components/schemas/ExerciceModeleComplet'
        '400':
          description: |
            Erreur dans les informations fourni
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'
              example: { error: "La séance '507f1f77bcf86cd799439017' (en header) n'est pas dans la session '507f1f77bcf86cd799439011'" }

        

components:
  parameters:
    FilterTheme:
      in: query
      name: theme
      schema:
        type: array
        items:
          type: string
          format: keyword
      # https://stackoverflow.com/a/69889483 pour tableau de mots clés
      style: form
      explode: true
    FilterDifficulte:
      in: query
      name: difficulte
      schema:
        type: integer
        minimum: 1
        maximum: 10
    PopulateSession:
      description: Remplace les ID des exercices par les exercices.
      in: query
      name: populate
      required: false
      schema:
        type: boolean
        default: false
  schemas:
    ExerciceModeleCompletSansId:
      required:
        - nom
        - themes
        - langage
        - correction
        - auteurs

      type: object
      properties:
        nom:
          type: string
          format: string
        template:
          type: string
          format: string
          description: Template de l'exercice à compléter
        enonce:
          type: string
          description: Énoncé de l'exercice à réaliser
          # format: markdown
        difficulte:
          type: integer
          minimum: 1
          maximum: 10
        themes:
          type: array
          items:
            type: string
            format: keyword
          description: Mots clés/étiquettes de l'exercice
          example:
            - boucle
            - fonction
            - condition
            - trie
        langage:
          type: string
          example: C
        tempsMoyen:
          type: number
          format: float
          description: Le temps moyen estimé pour cet exerice
        tempsMaximum:
          type: number
          format: float
          description: Le temps maximal mis pour cet exercice
        dataset:
          type: array
          items:
            type: object
            properties:
              contexte:
                type: string
                format: string
              jeuDeTests:
                $ref: '#/components/schemas/Test'
        correction:
          type: string
          description: Correction de l'exercice à réaliser
        commentaire:
          type: string
          description: Commentaire sur la correction
          example: Pour ce problème, il ne fallait pas utiliser le tri quicksort car il dégénère !
        aides:
          type: array
          items:
            type: string
          description: Indice à donner à l'étudiant
          example:
            - Il faut d'abord trier la liste
            - Vous devez utiliser la méthode sort
        auteurs:
          type: array
          items:
            type: string
            format: name
          example:
            - Stéphane Talbot
            - Philippe Pernelle
    ExerciceModeleComplet:
      allOf:
        - $ref: '#/components/schemas/ExerciceModeleCompletSansId'
        - type: object
          properties:
            id:
              type: string
              format: ObjectId
              description: Id natif de Mongo-db
              example: 507f1f77bcf86cd799439011
    Test:
      description: Décrit un jeu de test
      type: array
      items:
        type: object
        properties:
          parametres:
            type: array
            items:
              type: object
          reponse:
            type: object
    SessionModeleReq:
      description: Décris la requête de création d'une session
      type: object
      properties:
        strategie:
          type: string
          example: lineaire
        nom:
          type: string
          example: Découverte des pointeurs en C
        seances:
          type: array
          items:
            type: object
            properties:
              groupe:
                type: string
              dateDebut:
                type: string
                format: datetime
              dateFin:
                type: string
                format: datetime
              encadrant:
                type: string
              id:
                type: string
                format: ObjectId
                nullable: true
                description: Seulement en GET, pas POST
              
            example:
              groupe: "1"
              dateDebut: "2020-01-01T00:08:00.000Z"
              dateFin: "2020-01-01T00:09:00.000Z"
              encadrant: "Philippe Pernelle"


        exercices:
          type: array
          items:
            type: string
            format: ObjectId
            example: 507f1f77bcf86cd799439011
        
      required:
        - strategie
        - nom
        - exercices
    SessionModeleComplet:
      description: Décris une session
      allOf:
        - $ref: '#/components/schemas/SessionModeleReq'
        - type: object
          properties:
            id:
              type: string
              format: ObjectId
            exercices:
              type: array
              items:
                description: Liste des ID des exercices de la session. Peut-être remplacé par un object ExerciceModeleComplet si l'option populate est a true.
                oneOf:
                  - type: string
                    format: ObjectId
                  - $ref: '#/components/schemas/ExerciceModeleComplet'
    StandardError:
      type: object
      properties:
        error:
          type: string
          format: string
          example: La ressource n'a pas été trouvée
